events {
    worker_connections 1024;
}

http {

    # Hide NGINX version
    server_tokens off;

    # Define a custom log format
    log_format user_logs '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$request_uri"';

    # Access log configuration with conditional logging
    access_log /var/log/nginx/user_access.log user_logs;

    include /etc/nginx/blocklist.conf;  # Include blocklist file

    # Rate limiting configuration

    server {
        listen 80;

        # Reject requests using the IP address
        if ($host ~* "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$") {
            return 403;  # Reject if the host is an IP address
        }

        # Basic authentication for backend
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Redirect HTTP to HTTPS (if SSL is set up, this would be configured)
        # Uncomment and set up SSL if needed
        # server {
        #     listen 80;
        #     return 301 https://$host$request_uri;
        # }

        # Security headers

        # Location block for the backend service
        location /backend/ {
            proxy_pass http://backend:5030;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rewrite URL
            rewrite ^/backend/(.*)$ /$1 break;

        }

        # Location block for the frontend service
        location / {
            proxy_pass http://frontend:3030/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
